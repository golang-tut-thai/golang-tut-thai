Composite type
	
  + Array 
	
	Array ในภาษา Go ค่อนข้างแตกต่างจาก Array ในภาษา C และแตกต่างมากในภาษา Passcal(Slices,จะพูดถึงในหัวข้อถัดไป ,การกระทำอื่นๆใน ArrayของC)

var ar [3]int : ประกาศ ar เป็น Array ของ integers ขนาดเท่ากับ 3 ค่าเริ่มต้นทั้งหมดเป็น ศูนย์

ขนาดเป็นส่วนหนึ่งของ type

เราสามารถแสดงขนาดของ Array ได้ด้วยฟังก์ชัน len เช่น len(ar) == 3

 - Arrays are values

Arrays เป็น values ไม่ได้เป็น pointers เหมือนกับภาษา c 
คุณสามรถใช้ Address ของ Array ได้โดย & ใช้ตัวชี้ไปยัง Array 
ตัวอย่างเช่น การส่ง Array ไปยังฟังก์ชัน 

func f(a [3]int) { fmt.Println(a) }
func fp(a *[3]int) { fmt.Println(a) }
func main() {
	var ar [3] int
	f(ar)	// คัดลอก Array ar
	fp(&ar) // ผ่าน pointer
}

Output :
[0 0 0]
&[0 0 0]

  - Array literals
composite types ทั้งหมดมีไวยากรณ์คล้ายกันสำหรับกำหนดค่า สำหรับ arraysจะมีลักษณะดังนี้ 
	Array ขนาด3 ของ integer
	[3]int{1, 2, 3}

	Array ขนาด10 ของ integers, สามตัวแรกไม่ใช่ศูนย์:
	[10]int{ 1, 2, 3}
	
	ไม่ต้องการจำนวน นับขนาดตามที่กำหนดให้
	[...]int{1, 2, 3}

	ไม่กำหนดค่าตั้งต้น ใช้ key เป็นตัวกำหนดค่า
	[10]int{2:1, 3:1, 5:1, 7:1}

  - Pointers to array literals
	
	คุณสามารถใช้ Address ของ Array literal เพื่อตัวชี้ไปยังอินสแตนซ์ที่สร้างขึ้นมาใหม่

func fp(a *[3]int) { fmt.Println(a) }
func main() {
	for i := 0; i < 3; i++ {
	fp(&[3]int{i, i*i, i*i*i})
}
}

Output:
&[0 0 0]
&[1 1 1]
&[2 4 8]


